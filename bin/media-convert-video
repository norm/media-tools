#!/bin/bash

set -e

# shellcheck source=/dev/null
source $(which media)

is_sub "$*" true
summary_line "$*" 'convert a source video file to m4v'
help_text "$*" <<'EOF'
    Usage: media convert-video <dir> <output_file> [<dvd track>]

    Will convert the video file or DVD track found in the named
    directory, and output to the named file.

    Whilst this can be used manually, it is normally invoked
    automatically by `add-video`.
EOF


function get_audio_streams {
    local -r input="$1"
    local -r track="$2"

    HandBrakeCLI -i "$input" -t0 2>&1 \
        | extract_track_metadata "$track" \
        | extract_audio_tracks
}

function get_stream_keywords {
    local -r stream="$1"

    # format:
    # + 1, English (AC3) (2.0 ch) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps
    # (annoyingly, the encoding name can appear before or after the channels)
    echo "$stream" | perl -ne '
        s{
            ^ .*
            \+ \s+ (\d+), .*?               # 1: stream number and lang name
            \( (.*?) \) \s+                 # 2: encoding
            (?:                             # either...
                (?: \( [^)]+ \) \s+ )?      #   encoding name (optional)
                \( (.*?) \s+ ch \) \s+      #  3: channels

                |                           # or...

                \( (.*?) \s+ ch \) \s+      #   3: channels
                (?: \( [^)]+ \) \s+ )?      #   encoding name (optional)
            )
            \( iso639-2: \s+ (\w+) \)       # 4: language code
            .* $
        }{\1 \2 \3 \4}x;
        print;
    '
}

function comma_separated {
    local -r IFS=","
    echo "$*"
}

function get_audio_arguments {
    local -r input="$1"
    local -r track="${2:-1}"

    # TODO
    # filter language (only English/unknown, French/unknown, etc)
    # force 5.1ch to 2ch, 2ch to mono, etc
    local -a arg_channel
    local -a arg_bitrate
    local -a arg_mixdown
    local -a arg_rate
    local -a arg_encoder
    local quality
    local channel 
    local language

    while IFS= read -r line; do
        read -r stream quality channel language < <( get_stream_keywords "$line" )

        arg_channel+=($stream)
        if [ "$quality" = 'AC3' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:ac3')
        elif [ "$quality" = 'DTS' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:dts')
        elif [ "$quality" = 'AAC' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:aac')
        elif [ "$quality" = 'MP3' ]; then
            arg_encoder+=('ca_aac')
            arg_rate+=('48')
            if [ "$channel" = '2.0' ]; then
                arg_bitrate+=('160')
                arg_mixdown+=('stereo')
            elif [ "$channel" = '1.0' ]; then
                arg_bitrate+=('80')
                arg_mixdown+=('mono')
            else
                echo >&2 'Unknown audio type:'
                echo >&2 "quality=$quality"
                echo >&2 "channel=$channel"
                echo >&2 "language=$language"
                exit 1
            fi
        else
            echo >&2 'Unknown audio type:'
            echo >&2 "quality=$quality"
            echo >&2 "channel=$channel"
            echo >&2 "language=$language"
            exit 1
        fi
    done < <( get_audio_streams "$input" "$track" )

    echo '--audio' "$(comma_separated "${arg_channel[@]}")"
    echo '--ab' "$(comma_separated "${arg_bitrate[@]}")"
    echo '--mixdown' "$(comma_separated "${arg_mixdown[@]}")"
    echo '--arate' "$(comma_separated "${arg_rate[@]}")"
    echo '--aencoder' "$(comma_separated "${arg_encoder[@]}")"
}

function testing_handbrake_args {
    # low quality == faster
    echo '--quality' '55'
    echo '--x264-preset' 'ultrafast'
    echo '--h264-profile' 'baseline'
}

function small_video_dimensions {
    # small output == faster
    echo '--maxWidth' '320'
    echo '--maxHeight' '240'
}

function shorter_encode {
    echo '--chapters' '1'
    echo '--start-at' 'duration:0'
    echo '--stop-at' 'duration:60'
}

function normal_handbrake_args {
    # highest output is 1080p
    echo '--maxWidth' '1920'
    echo '--maxHeight' '1080'

    # prefer slower transforms for higher quality output
    echo '--quality' '22'
    echo '--x264-preset' 'slow'
    echo '--h264-profile' 'high'
    echo '--h264-level' '4.1'
}

function get_handbrake_args {
    get_audio_arguments "$input" "$track"

    # loose anamorphic pictures
    echo '--loose-anamorphic'
    echo '--modulus' '2'

    # auto crop detection is sometimes wrong, so never crop
    echo '--crop' '0:0:0:0'

    # deinterlace if needed
    echo '--decomb' 'fast'

    # use source frame rate, except clip at 30
    echo '--rate' '30'
    echo '--pfr'

    # x264 encoded mp4 files
    echo '--format' 'mp4'
    echo '--encoder' 'x264'
    echo '--encopts' 'b-adapt=2'

    # preserve chapter markers if in source
    echo '--markers'

    if [ -n "$MEDIA_TESTING" ]; then
        testing_handbrake_args
        if [[ "$MEDIA_TESTING" =~ 'short' ]]; then
            shorter_encode
        fi
        if [[ "$MEDIA_TESTING" =~ 'small' ]]; then
            small_video_dimensions
        fi
    else
        normal_handbrake_args
    fi

}

function media_convert_video {
    local -r input="$1"
    local -r output="$2"
    local -r track="${3:-1}"

    local -a handbrake_args=( $(get_handbrake_args "$input" "$track") )

    HandBrakeCLI \
        "${handbrake_args[@]}"      \
        -i "$input"                 \
        -t "$track"                 \
        -o "$output"

}


if [ "$0" = "${BASH_SOURCE[0]}" ]; then
    media_convert_video "$@"
fi
