#!/bin/bash

set -e

source $(which media)
summary_line "$*" 'convert a source video file to m4v'


function get_audio_streams {
    local input="$1"

    HandBrakeCLI -i "$input" -t0 2>&1 \
        | awk '/audio tracks/{flag=1; next} !/    \+ /{flag=0} flag'
}

function get_stream_keywords {
    local stream="$1"

    echo "$stream" | perl -ne '
        s{
            ^ .*
            \+ \s+ (\d+), .*
            \( (.*?) \) \s+
            \( (.*?) \s+ ch \) \s+
            \( iso639-2: \s+ (\w+) \)
            .* $
        }{\1 \2 \3 \4}x;
        print;
    '
}

function comma_separated {
    local IFS=","
    echo "$*"
}

function get_audio_arguments {
    local input="$1"

    # TODO
    # filter language (only English/unknown, French/unknown, etc)
    # force 5.1ch to 2ch, 2ch to mono, etc
    local -a arg_channel
    local -a arg_bitrate
    local -a arg_mixdown
    local -a arg_rate
    local -a arg_encoder
    local quality
    local channel 
    local language

    while IFS= read -r line; do
        read -r stream quality channel language < <( get_stream_keywords "$line" )

        arg_channel+=($stream)
        if [ "$quality" = 'AC3' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:ac3')
        elif [ "$quality" = 'DTS' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:dts')
        elif [ "$quality" = 'AAC' ]; then
            arg_bitrate+=('640')
            arg_mixdown+=('6ch')
            arg_rate+=('Auto')
            arg_encoder+=('copy:aac')
        elif [ "$quality" = 'MP3' ]; then
            arg_encoder+=('ca_aac')
            arg_rate+=('48')
            if [ "$channel" = '2.0' ]; then
                arg_bitrate+=('160')
                arg_mixdown+=('stereo')
            elif [ "$channel" = '1.0' ]; then
                arg_bitrate+=('80')
                arg_mixdown+=('mono')
            else
                echo >&2 'Unknown audio type:'
                echo >&2 "quality=$quality"
                echo >&2 "channel=$channel"
                echo >&2 "language=$language"
                exit 1
            fi
        else
            echo >&2 'Unknown audio type:'
            echo >&2 "quality=$quality"
            echo >&2 "channel=$channel"
            echo >&2 "language=$language"
            exit 1
        fi
    done < <( get_audio_streams "$input" )

    echo '--audio' $(comma_separated "${arg_channel[@]}")
    echo '--ab' $(comma_separated "${arg_bitrate[@]}")
    echo '--mixdown' $(comma_separated "${arg_mixdown[@]}")
    echo '--arate' $(comma_separated "${arg_rate[@]}")
    echo '--aencoder' $(comma_separated "${arg_encoder[@]}")
}

function media_convert_video {
    local input="$1"
    local output="$2"
    local track="${3:-1}"

    local -a handbrake_args

    handbrake_args+=($( get_audio_arguments "$input" ))

    # no more than 1080p
    handbrake_args+=('--maxWidth' '1920')
    handbrake_args+=('--maxHeight' '1080')

    # loose anamorphic pictures
    handbrake_args+=('--loose-anamorphic')
    handbrake_args+=('--modulus' '2')

    # auto crop detection is sometimes wrong, so never crop
    handbrake_args+=('--crop' '0:0:0:0')

    # deinterlace if needed
    handbrake_args+=('--decomb' 'fast')

    # use source frame rate, except clip at 30
    handbrake_args+=('--rate' '30')
    handbrake_args+=('--pfr')

    # prefer slower transforms for higher quality output
    handbrake_args+=('--quality' '22')
    handbrake_args+=('--x264-preset' 'slow')
    handbrake_args+=('--h264-profile' 'high')
    handbrake_args+=('--h264-level' '4.1')

    # x264 encoded mp4 files
    handbrake_args+=('--format' 'mp4')
    handbrake_args+=('--encoder' 'x264')
    handbrake_args+=('--encopts' 'b-adapt=2')

    # preserve chapter markers if in source
    handbrake_args+=('--markers')

    HandBrakeCLI \
        "${handbrake_args[@]}"      \
        -i "$input"                 \
        -t "$track"                 \
        -o "$output"

}


if [ "$0" = "$BASH_SOURCE" ]; then
    media_convert_video "$@"
fi
