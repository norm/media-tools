#!/bin/bash

reset="\e[0m"
bold="\e[1m"
red="\e[31m"
MEDIA_VERSION=0.6


function media_error {
    printf "${bold}${red}*** %s${reset}\n" "$*"
    exit 1
}

function config_key {
    local -r filename="$1"
    local key="$2"
    local -r section="${3:-____}"

    key="${key//\(/\(}"
    key="${key//)/\)}"
    key="${key//^/\^}"
    key="${key//$/\\$}"
    key="${key//./\.}"
    key="${key//\*/\\*}"
    key="${key//\?/\\?}"
    key="${key//\+/\\+}"
    key="${key//\|/\\|}"

    awk -F= "
            NR==1 { p=1 }
            /^\[/ { p=0 }
            /^\[${section}\]/ { p=1 }
            p==1 && /^ *${key} *=/ { print \$2 }
        " "$filename" \
            | sed -e 's/^ *//' \
            | tail -1
}

function config_as_atoms {
    local -r filename="$1"
    local -r section="${2:-____}"

    perl -E "
        my \$ignore_section = 0;
        my \$section = '$section';
        my %values;

        while (<>) {
            s/^ *(.*?) *$/\1/;
            next if m/^$/;
            next if m/^#/;

            if (m/^\[/) {
                if (m/^\[\$section\]/) {
                    \$ignore_section = 0;
                    next;
                }
                else {
                    \$ignore_section = 1;
                }
            }

            next if \$ignore_section;

            chomp;
            my( \$key, \$value ) = split m/ *= */;
            \$values{\$key} = \$value;
        }

        for my \$key ( sort keys %values ) {
            say \"\--\$key=\\\"\$values{\$key}\\\"\";
        }
    " "$filename"
}

function show_configuration {
    echo "auto_add_dir  = $AUTO_ADD_DIR"
    echo "cd_rip_dir    = $CD_RIP_DIR"
    echo "convert_dir   = $CONVERT_DIR"
    echo "ignore_itunes = $IGNORE_ITUNES"
    echo "trash_dir     = $TRASH_DIR"
    echo "tv_base       = $TV_BASE"
    echo "video_lang    = $VIDEO_LANG"
}

function show_configuration_help {
    sed -e 's/^    //' <<EOF
    The configurable settings of media-tools are:

        auto_add_dir   where the iTunes "Automatically Add to iTunes" is
                       (if set, add-cd will move converted audio to it)
        cd_rip_dir     where the output of rip-cd is kept
        convert_dir    where video conversion temp files are kept
        ignore_itunes  set to stop add-video adding the file to iTunes
        trash_dir      after converting, add-video will move video files here
        tv_base        where to store your converted TV content
        video_lang     the three-letter code for preferred audio language in
                       video content (eg eng, ita, spa); set to 'all' or '*'
                       to accept all languages (which is also the default)

    Each can be set two ways:

      * set the environment variable MEDIA_<SETTING>, like so:

          export MEDIA_CD_RIP_DIR=~/Desktop/cd-rips

      * create a file like so:

          # media config
          trash_dir = /Volumes/trash

        then set the environment variable MEDIA_CONFIG to point to it:

          export MEDIA_CONFIG=~/.media.conf

    Environment variables will override the contents of the file pointed at
    by MEDIA_CONFIG when both are set. This allows you to keep your usual
    settings in a file, but temporarily change them if necessary, without
    editing the file (and subsequently forgetting to change it back).

    The values are currently set to:

EOF
    show_configuration | sed -e 's/^/    /'
}

function media_lookup_atom {
    local -r file="$1"
    local -r atom="$2"

    # the perl invocation removes a unicode byte order mark character, which
    # is probably useful, but makes it really hard to grep things consistently
    AtomicParsley "$file" -t                \
        | perl -ne 's/^[^A]+//m; print;'    \
        | grep "Atom .${atom}."             \
        | cut -c23-
}

function lookup_tv_id {
    config_key "$MEDIA_CONFIG" "$1" 'tv-ids'
}

function extract_track_metadata {
    local -r track="$1"

    awk "/^\+ title ${track}:/{flag=1;next} /^\+ title /{flag=0} flag"
}

function extract_audio_tracks {
    awk "/^  \+ audio tracks:/{flag=1;next} /^  \+/{flag=0} flag"
}

function extract_chapters {
    awk "/^  \+ chapters:/{flag=1;next} /^  \+/{flag=0} flag"
}

function simple_encode {
    # shellcheck disable=SC2001
    echo "$*" | sed -e 's/ /+/g'
}

function cddb_cmd {
    # last line removes carriage returns from output, because ugh
    curl -s --get \
        --data "cmd=$( simple_encode "$*" )" \
        --data "hello=$cddb_hello" \
        --data "proto=6" \
            'http://freedb.freedb.org/~cddb/cddb.cgi' \
                    | tr -d '\r'
}

function cddb_matches {
    local -r disc_id="$1"

    local -r matches=$( cddb_cmd "cddb query $disc_id" )
    local -r code=$( echo "$matches" | head -1 | cut -c1-3 )

    case "$code" in
        200)    # exact match, strip the status code
            echo "$matches" \
                | cut -d' ' -f2-
            ;;

        210)    # multiple matches, strip the CDDB protocol lines
            echo "$matches" \
                | sed '1d;$d'
            ;;

        *)      # shrug
            2>&1 echo "Unknown status code: $code"
            2>&1 echo ''
            2>&1 echo "$matches"
            ;;
    esac
}

function cddb_read_disc {
    local -r genre="$1"
    local -r disc_id="$2"

    # delete the first and last lines (CDDB protocol noise), and
    cddb_cmd "cddb read $genre $disc_id" \
        | sed '1d;$d'
}

function is_sub {
    if [ "$1" = '--is-sub' ]; then
        echo "$2"
        exit
    fi
}

function summary_line {
    if [ "$1" = '--summary' ]; then
        echo "$2"
        exit
    fi
}

function help_text {
    if [ "$1" = '--help' ]; then
        sed -e 's/^    //'
        exit
    fi
}

function show_help_for {
    case "$1" in
        '')
            echo 'Usage: media help <command>'
            echo ''
            echo 'Show more detailed help for the named command.'
            ;;

        show-config)
            show_configuration_help
            ;;

        version)
            # seriously?
            echo 'List the current version of media-tools installed.'
            ;;

        help)
            # INCEPTION HORN BLARE
            echo 'Shows more detailed help for media commands.'
            ;;

        *)
            media-"$1" --help
            ;;
    esac
}

function show_version {
    echo "media-tools version $MEDIA_VERSION"
}

function show_usage {
    show_version
    echo ''
    echo 'Usage: media <command> [args...]'
    echo ''
    echo '                  help  show more detailed help on a command'
    echo '           show-config  show the current configuration'
    echo '          show-version  show the current version of media-tools'
    list_available_commands
}

function list_available_commands {
    local -a commands=($( compgen -c | grep '^media-' ))
    local main_commands
    local subcommands

    for command in "${commands[@]}"; do
        if [ "$($command --is-sub)" = 'false' ]; then
            main_commands="$(
                    printf '%s\n%22s  %s' \
                        "${main_commands}" \
                        "$( echo "$command" | cut -c7- )" \
                        "$( $command --summary )"
                )"
        else
            subcommands="$(
                    printf '%s\n%22s  %s' \
                        "${subcommands}" \
                        "$( echo "$command" | cut -c7- )" \
                        "$( $command --summary )"
                )"
        fi
    done

    echo "$main_commands"
    echo "$subcommands"
}

function run_command {
    local -r command="media-$1"
    shift

    $command "$@"
}

# default configuration
AUTO_ADD_DIR=
CD_RIP_DIR="${HOME}/Music/rips"
CONVERT_DIR=/tmp
IGNORE_ITUNES=
TRASH_DIR=
TV_BASE=/files/tv
VIDEO_LANG=all
cddb_hello=$(
    simple_encode \
        "$USER" \
        "$(hostname)" \
        media-tools \
        "$MEDIA_VERSION"
)

# override config with file
if [ -n "$MEDIA_CONFIG" ]; then
    auto_add_dir="$( config_key "$MEDIA_CONFIG" auto_add_dir )"
    [ -n "$auto_add_dir" ] && AUTO_ADD_DIR="${auto_add_dir}"
    cd_rip_dir="$( config_key "$MEDIA_CONFIG" cd_rip_dir )"
    [ -n "$cd_rip_dir" ] && CD_RIP_DIR="${cd_rip_dir}"
    convert="$( config_key "$MEDIA_CONFIG" convert_dir )"
    [ -n "$convert" ] && CONVERT_DIR="${convert}"
    ignore="$( config_key "$MEDIA_CONFIG" ignore_itunes )"
    [ -n "$ignore" ] && IGNORE_ITUNES="${ignore}"
    trash="$( config_key "$MEDIA_CONFIG" trash_dir )"
    [ -n "$trash" ] && TRASH_DIR="${trash}"
    tv="$( config_key "$MEDIA_CONFIG" tv_base )"
    [ -n "$tv" ] && TV_BASE="${tv}"
    lang="$( config_key "$MEDIA_CONFIG" video_lang )"
    [ -n "$lang" ] && VIDEO_LANG="${lang}"
fi

# override with env, which takes precedence over file
AUTO_ADD_DIR="${MEDIA_AUTO_ADD_DIR:=$AUTO_ADD_DIR}"
CD_RIP_DIR="${MEDIA_CD_RIP_DIR:=$CD_RIP_DIR}"
CONVERT_DIR="${MEDIA_CONVERT_DIR:=$CONVERT_DIR}"
IGNORE_ITUNES="${MEDIA_IGNORE_ITUNES:=$IGNORE_ITUNES}"
TRASH_DIR="${MEDIA_TRASH_DIR:=$TRASH_DIR}"
TV_BASE="${MEDIA_TV_BASE:=$TV_BASE}"
VIDEO_LANG="${MEDIA_VIDEO_LANG:=$VIDEO_LANG}"


if [ "$0" = "${BASH_SOURCE[0]}" ]; then
    # being run as a command, not sourced by another script
    case "$1" in
        ''|-h|--help)
            show_usage
            ;;

        help)
            show_help_for "$2"
            ;;

        show-config)
            show_configuration
            ;;

        version)
            show_version
            ;;

        *)  run_command "$@"
            ;;
    esac
fi
