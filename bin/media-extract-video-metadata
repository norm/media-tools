#!/bin/bash

set -e

# shellcheck source=/dev/null
source $(which media)

is_sub "$*" true
summary_line "$*" 'extract metadata from a directory name'
help_text "$*" <<'EOF'
    Usage: media create-video-metadata <dir> [<track>]

    Using the named directory, outputs the tag arguments needed by
    AtomicParsley to add metadata to a video file. If the directory
    contains a DVD rip, the episode(s) details are found in the named
    track subsection of the `metadata.conf` file. If the directory
    contains a single video file, the episode details are extracted
    from the directory's name.

    Whilst this can be used manually, it is normally invoked
    automatically by `add-cd`.
EOF


function extract_metadata_from_directory_name {
    local escaped

    escaped="$(
        echo "$1" \
            | sed -e 's/\$/\\$/' -e 's/@/\\@/'
    )"

    perl -E "
        sub quote_string {
            my \$string = shift;
            \$string =~ s/\\\$/\\\\\\\$/g;
            \$string =~ s/\"/\\\\\"/g;
            return qq(\"\$string\");
        }

        my %ratings = (
            'U' => 'uk-movie|U|100|',
            'PG' => 'uk-movie|PG|200|',
            '12' => 'uk-movie|12|300|',
            '12A' => 'uk-movie|12A|325|',
            '15' => 'uk-movie|15|350|',
            '18' => 'uk-movie|18|400|',
        );

        my \$extract = qq($escaped);

        # strip trailing slashes
        \$extract =~ s{/$}{};

        # strip everything but the last dir
        \$extract =~ s{ ^ .*?/ ([^/]+) $}{\1}x;

        \$extract =~ m{
            ^
            (?:
                # match a TV series episode
                (?<series> .* )
                \s+ - \s+
                (?<season> \d+ )
                x
                (?<episode> \d+ (?: -\d+ )? )
                \s+ - \s+
                (?<title> .* )
            )
            | 
            (?:
                # match a movie
                (?<movie> .* )
                \s+ - \s+
                (?<year> \d+ )
                \s+
                (?<rating> .{1,3} )
            )
            $
        }x;

        if (defined $+{'series'}) {
            say join ' ',
                '--TVShowName=' . quote_string($+{'series'}),
                '--TVSeasonNum=' . $+{'season'},
                '--TVEpisodeNum=' . $+{'episode'},
                '--title=' . quote_string($+{'title'}),
                '--stik=' . quote_string('TV Show'),
        }
        elsif (defined $+{'movie'}) {
            my \$rating = \$ratings{$+{'rating'}};

            say join ' ',
                '--title=' . quote_string($+{'movie'}),
                '--album=' . quote_string($+{'movie'}),
                '--year=' . quote_string($+{'year'}),
                '--rDNSatom=' . quote_string(\$rating),
                    'name=iTunEXTC',
                    'domain=com.apple.iTunes',
                '--stik=Movie',
        }
        else {
            say qq(Error: unknown format '\$extract');
        }
";
}

# shellcheck disable=SC2001
function extract_metadata_from_file {
    local -r dir="$1"
    local -r track="$2"
    local series movie season episode title

    series="$( config_key "$dir/metadata.conf" series "$track" )"
    movie="$( config_key "$dir/metadata.conf" movie "$track" )"

    if [ -n "$series" ]; then
        season=$( config_key "$dir/metadata.conf" season "$track" )
        episode=$( config_key "$dir/metadata.conf" episode "$track" )
        title=$( config_key "$dir/metadata.conf" title "$track" )

        # preserve double quotes
        series=$( echo "$series" | sed -e 's/"/\\"/g' ) 
        title=$( echo "$title" | sed -e 's/"/\\"/g' )

        # FIXME
        # shellcheck disable=SC2166
        if [ -n "$series" -a -n "$season" -a -n "$episode" -a -n "$title" ]; then
            echo "--TVShowName=\"${series}\"" \
                 "--TVSeasonNum=$season" \
                 "--TVEpisodeNum=$episode" \
                 "--title=\"$title\"" \
                 '--stik="TV Show"'
        else
            media_error "missing TV series metadata in '$1/metadata.conf'"
        fi
    elif [ -n "$movie" ]; then
        local -r year="$( config_key "$dir/metadata.conf" year "$track" )"
        local -r rating="$(config_key "$dir/metadata.conf" rating "$track" )"
        local -r itunes="$( rating_to_itunes "$rating" )"
        local -r feature="$( config_key "$dir/metadata.conf" feature "$track" )"
        local -r extra="$( config_key "$dir/metadata.conf" extra "$track" )"

        if [ -n "$feature" ]; then
            echo "--title=\"$movie\"" \
                 "--album=\"$movie\"" \
                 "--year=$year" \
                 "--rDNSatom=\"$itunes\"" \
                    'name=iTunEXTC' \
                    'domain=com.apple.iTunes' \
                 '--stik=Movie'
        elif [ -n "$extra" ]; then
            echo "--title=\"$extra\"" \
                 "--album=\"$movie\"" \
                 "--year=$year" \
                 "--rDNSatom=\"$itunes\"" \
                    'name=iTunEXTC' \
                    'domain=com.apple.iTunes' \
                 '--stik=Movie'
        fi
    else
        media_error "unknown metadata in '$1/metadata.conf'"
    fi
}

if [ -f "$1/metadata.conf" ]; then
    extract_metadata_from_file "$@"
else
    extract_metadata_from_directory_name "$1"
fi
