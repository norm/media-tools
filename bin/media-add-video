#!/bin/bash

set -e

# shellcheck source=/dev/null
source "$(which media)"

is_sub "$*" false
summary_line "$*" 'convert and add new media to iTunes library'
help_text "$*" <<'EOF'
    Usage: media add-video <dir> [<dir>...]

    Will convert the video in each named directory, and install the output in
    the directory set by the environment variable MEDIA_TV_BASE, or the config
    setting tv_base, in subdirectories named for the episode's details, eg
    `$MEDIA_TV_BASE/House/Season 1/01 Everybody Lies.m4v`.

    If the directory contains a DVD rip, the episode(s) details are found in
    the `metadata.conf` file -- which is created if needed when `add-video`
    is first invoked on the directory.

    If the directory contains a single video file, the episode details are
    extracted from the directory's name which should be of the form
    `House - 1x01 - Everybody Lies`. These can be created in the right format
    with the command `make-episode-dir`.

    Currently only TV episodes are supported, and must have both a season and
    an episode number.
EOF


function clean_up_converted {
    local -r dir="$1"
    local -r video="$2"

    if [ -n "$TRASH_DIR" ]; then
        mkdir -p "$TRASH_DIR"
        mv "$video" "$TRASH_DIR"
        rm -f \
            "$dir/poster.jpg" "$dir/"poster-resized-*.jpg \
            "$dir/poster.png" "$dir/"poster-resized-*.png \
            "$dir/.DS_Store"

        # don't exit (because of `set -e`) if we haven't cleaned all the
        # contents out (that's not an error worth stopping for)
        rmdir "$dir" \
            || true
    fi
}

function create_metadata_file_if_missing {
    local -r directory="$1"
    local -r metadata="$directory/metadata.conf"

    if [ ! -f "$metadata" ]; then
        # create a metadata.conf file for instructing `media` what 
        # the TV shows inside the DVD are
        media-create-video-metadata "$directory" > "$metadata"
        echo "Created '$metadata'."
        echo "Edit this and re-run."
        exit
    fi
}

function abort_if_metadata_unedited {
    local -r metadata="$1"

    local -r tokens=$(
        grep -v '^ *#' "$metadata" \
            | grep REPLACE_ME
    )

    if [ -n "$tokens" ]; then
        echo "'$metadata' has not been filled out; aborting."
        exit 1
    fi
}

function convert_and_add_from_dvd_image {
    local -r directory="$1"
    local -r arg_tracks="$2"
    local -r metadata="$directory/metadata.conf"
    local tracks

    create_metadata_file_if_missing "$directory"
    abort_if_metadata_unedited "$metadata"

    # default is all tracks, unless -t arg specified
    if [ -n "$arg_tracks" ]; then
        tracks="$arg_tracks"
    else
        tracks=$( grep '^\[' "$metadata" | sed -e 's/\[//' -e 's/\]//' )
    fi

    # convert each track
    for track in $tracks; do
        local output="${CONVERT_DIR}/media_conversion_dvd${track%.*}.m4v"

        media-convert-video "$directory" "$output" "$track"

        media-extract-video-metadata "$directory" "$track"
        eval media-tag-video "$output" "$( 
                media-extract-video-metadata "$directory" "$track"
            )"

        [ -f "$directory/poster.jpg" ] \
            && media-set-artwork "$output" "$directory/poster.jpg"
        [ -f "$directory/poster.png" ] \
            && media-set-artwork "$output" "$directory/poster.png"

        path=$( eval media-install-video "$output" )

        if [ -z "$IGNORE_ITUNES" ]; then
            media-itunes-add "$path"
        fi
    done
}

function convert_and_add_from_directory {
    local -r dir="$1"
    local -r video="$2"

    local -r file=$( basename "$video" )
    local -r output="${CONVERT_DIR}/media_conversion_${file%.*}.m4v"

    media-convert-video "$video" "$output"

    eval media-tag-video "$output" "$( media-extract-video-metadata "$dir" )"

    [ -f "$dir/poster.jpg" ] && media-set-artwork "$output" "$dir/poster.jpg"
    [ -f "$dir/poster.png" ] && media-set-artwork "$output" "$dir/poster.png"

    path=$( eval media-install-video "$output" )
    if [ -z "$IGNORE_ITUNES" ]; then
        media-itunes-add "$path"
    fi

    clean_up_converted "$dir" "$video"
}

tracks=''
while getopts "t:" option; do
    case $option in
        t)  tracks="$OPTARG"
            ;;
    esac
done
shift $(( OPTIND -1 ))


for directory in "$@"; do
    if [ -d "$directory/VIDEO_TS" ]; then
        convert_and_add_from_dvd_image "$directory" "$tracks"
    else
        video=$(
            # shellcheck disable=SC2012
            ls "$directory"/*.{m4v,avi,mkv,mp4,mpg,wmv,vob,m2ts,xvid} \
                2>/dev/null \
                    || true     # not all files will exist, not an error
        )
        count=$(
            # shellcheck disable=SC2012
            ls "$directory"/*.{m4v,avi,mkv,mp4,mpg,wmv,vob,m2ts,xvid} \
                2>/dev/null \
                    | wc -l \
                    | tr -d ' '
        )

        case $count in
            0)  media_error "\"$directory\" has no known video content."
                ;;
            1)  convert_and_add_from_directory "$directory" "$video"
                ;;
            *)  media_error "\"$directory\" has multiple video files."
                ;;
        esac
    fi
done
