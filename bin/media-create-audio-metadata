#!/bin/bash

set -e

# shellcheck source=/dev/null
source $(which media)

is_sub "$*" true
summary_line "$*" 'create metadata file from audio CD'
help_text "$*" <<'EOF'
    Usage: media create-audio-metadata [blank]

    Queries CDDB and creates a metadata.conf file from the currently
    inserted CD. You can override the location where these files are
    written by setting the environment variable MEDIA_CD_RIP_DIR, or the
    config setting cd_rip_dir.

    If the argument 'blank' is given, or there is no CD in the drive,
    a set of blank metadata will be echoed to standard output. This is
    useful for non-CD based rip directories.

    Whilst this can be used manually, it is normally invoked
    automatically by `rip-cd`.
EOF


function number_to_letter {
    echo "$@" | tr '0-9' 'a-j'
}

function letter_to_number {
    echo "$@" | tr 'a-j' '0-9'
}

function cddb_entry {
    local details="$1"
    local entry="$2"

    # DTITLE contains both artist and disc name, which is frustrating, as
    # we have to rely on the convention that it will be split correctly
    case "$entry" in
        DALBUM)
            echo "$details" \
                    | grep DTITLE= \
                    | awk -F= '{ print $2 }' \
                    | awk -F' / ' '{ print $2 }'
            ;;
        DARTIST)
            echo "$details" \
                    | grep DTITLE= \
                    | awk -F= '{ print $2 }' \
                    | awk -F' / ' '{ print $1 }'
            ;;
        *)
            echo "$details" \
                    | grep "${entry}=" \
                    | awk -F= '{ print $2 }'
            ;;
    esac
}

function output_blank_metadata {
    sed -e 's/^        //' <<EOF
        album = REPLACE_ME
        artist = REPLACE_ME
        compilation = false
        disk = 1/1
        genre = REPLACE_ME
        purchaseDate = 1970-01-01T12:00:00Z
        year = REPLACE_ME

        # tracks can also over-ride options, such as:
        #   artist = <track artist>
        #   genre  = <track genre>
        #   year   = <track year>
        #
        # other options:
        #   grouping = <grouping>
        #   comment = [instrumental]

        [01]
        title = REPLACE_ME

        [02]
        title = REPLACE_ME

        [03]
        title = REPLACE_ME

        [04]
        title = REPLACE_ME

        [05]
        title = REPLACE_ME

        [06]
        title = REPLACE_ME

        [07]
        title = REPLACE_ME

        [08]
        title = REPLACE_ME

        [09]
        title = REPLACE_ME

        [10]
        title = REPLACE_ME
EOF
}

function create_cd_metadata {
    local -r genre=$( echo "$1" | cut -d' ' -f1 )
    local -r id=$( echo "$1" | cut -d' ' -f2 )
    local -r details="$( cddb_read_disc "$genre" "$id" )"

    # working dir uses the calculated ID (and not the one returned by CDDB)
    # because some results are approximate matches with different IDs
    # shellcheck disable=SC2154
    working_dir="${CD_RIP_DIR}/${media_disc_id}"
    metadata_file="${working_dir}/metadata.conf"
    mkdir -p "$working_dir"

    sed -e 's/^        //'> "$metadata_file" <<EOF
        album = $(cddb_entry "$details" DALBUM)
        artist = $(cddb_entry "$details" DARTIST)
        compilation = false
        disk = 1/1
        genre = $(cddb_entry "$details" DGENRE)
        purchaseDate = 1970-01-01T12:00:00Z
        year = $(cddb_entry "$details" DYEAR)

        # tracks can also over-ride options, such as:
        #   artist = <track artist>
        #   genre  = <track genre>
        #   year   = <track year>
        #
        # other options:
        #   grouping = <grouping>
        #   comment = [instrumental]
EOF

    local track="$media_disc_first_audio_track"
    local track_offset=$((track - 1))
    local cddb_track
    local cd_track
    local title
    local artist
    local section

    while true; do
        # CDDB is 0 indexed
        cddb_track=$((track - 1))
        title="$(cddb_entry "$details" "TTITLE$cddb_track")"

        [ -z "$title" ] && break

        artist=
        if [[ "$title" == *' / '* ]]; then
            artist=$( echo "$title" | awk -F' / ' '{ print $1 }' )
            title=$( echo "$title" | awk -F' / ' '{ print $2 }' )
        fi

        # allow for CDs with data tracks at the start
        cd_track=$((track - track_offset))
        section="$( printf '%02d' $cd_track )"

        echo '' >> "$metadata_file"
        echo "[$section]" >> "$metadata_file"

        [ -n "$artist" ] \
            && echo "artist = $artist" >> $metadata_file
        echo "title = $( apply_title_case "$title" )" >> "$metadata_file"

        let track=track+1
    done
}


if [ "$0" = "${BASH_SOURCE[0]}" ]; then
    eval "$( media-get-cd-id )"

    if [ "$media_disc_id" = '00000000' -o "$1" = 'blank' ]; then
        output_blank_metadata
        exit
    fi

    # grab each match as an array entry; use the first as the default
    declare -a matches
    IFS=$'\n' matches=($( cddb_matches "$media_disc_query" ))
    match="${matches[0]}"

    # if there is only one match, use it; otherwise prompt user to choose
    if [ "${#matches[@]}" -gt 1 ]; then
        echo "Multiple matches found:"
        echo ''

        count=0
        for match in "${matches[@]}"; do
            printf '%4s)  %s\n' \
                "$( number_to_letter $count )" \
                "$( echo "$match" | cut -d' ' -f3- )"
            let count=count+1
        done

        read -n1 -p"Choose which entry matches your disc: " choice
        echo ''

        number="$( letter_to_number "$choice" )"
        match="${matches[$number]}"
    fi

    [ -z "$match" ] \
        && media_error "'$choice' is not a valid choice."

    create_cd_metadata "$match"
fi
